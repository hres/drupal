<?php//***  * The admin panel * ***/*** * NHPID data node  setting */ function tpd_data_node_type_form($form, &$form_state=NULL) {    $form['help'] = array(    '#type' => 'item',    '#markup' => t('This setting defines node types storing NHPID data.' ),  );  $defaults_pattern = array("code_.+");  $node_types = array();  $default_types = array();  $node_objs = node_type_get_types();  foreach ($node_objs as $type => $obj) {    $node_types[$type] = $obj -> name . " ($type)";    foreach ($defaults_pattern as $pattern) {      $pattern = "/^$pattern/";      $default_types[$type] = 0;      if (preg_match($pattern, $type)) {        $default_types[$type] = $type;        break;      }    }  }  //drupal_set_message(nhpid_api_dump($default_types, 'red', TRUE));  $components = variable_get('nhpid_data_node_types', $default_types);  $form['nhpid_content'] = array(    '#type' => 'fieldset',    '#title' => 'TPD Data Node Types',    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );  $form['nhpid_content']['nhpid_data_node_types'] = array(    '#type' => 'checkboxes',    '#title' => 'NHPID data node types',    '#options' => $node_types,    '#default_value' => $components,    '#required' => FALSE,    '#description' => t('Check if the node type is a TPD data node type.'),  );    $form['default'] = array(    '#type' => 'hidden',    '#value' => serialize($default_types),  );  $form['submit'] = array(    '#type' => 'submit',    '#value' => t('Save setting')  );  $form['restore_default'] = array(    '#type' => 'submit',    '#value' => t('Restore default')  );  //drupal_set_message(nhpid_api_dump($form, 'red', TRUE));  return $form;}function tpd_data_node_type_form_submit($form, &$form_state) {  $value = null;  // nhpid data node types  if ($form_state['clicked_button']['#id'] == 'edit-restore-default') {    $value = unserialize($form_state['values']['default']);  }  else {    $value = $form_state['values']['nhpid_data_node_types'];  }  variable_set("nhpid_data_node_types", $value);    $form_state['storage']['values'] = $form_state['values'];}/*** * Field dependency setting */ function tpd_field_dependency_form($form, &$form_state=NULL) {  $all_nhpid_types = get_all_nhpid_data_node_types();	$referring_nhpid_types =$all_nhpid_types;  $all_referring_fields = array();  $all_fc_referring_fields = array();	$all_possible_referred_fields = array();	foreach($all_nhpid_types as $nhpid_type => $name){    $type_fields = get_all_fields_of_node_type($nhpid_type);		foreach ($type_fields as $field => $field_info){      //drupal_set_message(nhpid_api_dump($field_info, 'blue', TRUE));			if ($field_info['type'] == 'field_reference') {        $all_referring_fields[$nhpid_type][$field]="$field (". $field_info['label'] . ")";			}			if($field_info['type'] == 'text' or $field_info['type'] == 'text_long'){ //only text and text_long fields can be a referred field        $all_possible_referred_fields[$nhpid_type][$field]="$field (". $field_info['label'] . ")";			}			if($field_info['type'] == 'field_collection') {        //drupal_set_message(nhpid_api_dump($field, 'blue', TRUE));				$fc_field_instances = field_info_instances('field_collection_item', $field);				foreach($fc_field_instances as $fc_field => $fc_field_instance){					$fc_field_type = nhpid_api_get_field_type($fc_field);          //drupal_set_message(nhpid_api_dump($fc_field_type, 'blue', TRUE));          if ($fc_field_type == 'field_reference') {		        $all_fc_referring_fields[$nhpid_type][$field]['fields'][$fc_field]="$fc_field(" . $fc_field_instance['label'] .')'  ;            $all_fc_referring_fields[$nhpid_type][$field]['label']="$field (". $field_info['label'] . ")";					}				}			}		}    if (empty($all_referring_fields[$nhpid_type]) and empty($all_fc_referring_fields[$nhpid_type])) unset($referring_nhpid_types[$nhpid_type]);	}  //drupal_set_message(nhpid_api_dump($form_state, 'blue', TRUE));  $form['#tree'] = TRUE;  $form['help'] = array(    '#type' => 'item',    '#markup' => t("This setting defines settings used by field_reference fields. Click 'Reset field_reference option lists' to save the changes after and changes." ),  );  $form['tpd_field_reference_referred_fields'] = array(    '#type' => 'fieldset',    '#title' => t('Referred fields'),    '#collapsible' => TRUE,    '#collapsed' => TRUE Xor (isset($form_state['clicked_button']) and $form_state['clicked_button']['#id'] == 'edit-tpd-field-reference-referred-fields-update-referring-type'),  );	$form['tpd_field_reference_referred_fields']['help'] = array(    '#type' => 'item',    '#markup' => t("Please notice field_reference setting is global a setting, meaning if you change a field of a content type, you change all content types containing the field. Please make sure the referred fields include all fields which are referred by the field in all content types." ),  );  $referring_type = empty($form_state['values']['tpd_field_reference_referred_fields']['referring_type'])? array_shift(array_keys($referring_nhpid_types)):$form_state['values']['tpd_field_reference_referred_fields']['referring_type'];  $form['tpd_field_reference_referred_fields']['referring_type'] = array(	    '#type' => 'select',	    '#title' => t("Referring Node Type (Reffering Field)"),	    '#options' => $referring_nhpid_types,			'#default_value' => $referring_type,	);  $form['tpd_field_reference_referred_fields']['update_referring_type']=array(    '#type' => 'submit',    '#value' => t('Show referred fields for selected referring node type'),    '#name' => "tpd_field_reference_referred_fields_update_referring_type",    '#limit_validation_errors' => array(array('tpd_field_reference_referred_fields', 'referring_type')),		'#submit' => array('tpd_field_dependency_form_submit'),  );	  $form['tpd_field_reference_referred_fields']['fields']=array(    '#type' => 'value',    '#value' => $all_referring_fields[$referring_type],  );  $form['tpd_field_reference_referred_fields']['fc_fields']=array(    '#type' => 'value',    '#value' => isset($all_fc_referring_fields[$referring_type]) ? $all_fc_referring_fields[$referring_type] : array(),  );	$referring_fields = $all_referring_fields[$referring_type];	foreach($referring_fields as $referring_field => $referring_field_name){		$referring_field_field = field_info_field($referring_field);		$form['tpd_field_reference_referred_fields'][$referring_field] = array(	    '#type' => 'fieldset',	    '#title' => t("Referring field: $referring_field_name"),	    '#collapsible' => TRUE,	    '#collapsed' => false,	  );		//drupal_set_message(nhpid_api_dump($referring_field_field['settings']['fields']['node'], 'blue', TRUE));		$referred_types = isset($referring_field_field['settings']['fields']['node'])? $referring_field_field['settings']['fields']['node'] : array();		$form['tpd_field_reference_referred_fields'][$referring_field]['old_referred_types'] = array(	    '#type' => 'fieldset',	    '#title' => t("Existing Referred Fields"),	    '#collapsible' => TRUE,	    '#collapsed' => false,			'#access'=>!empty($referring_field_field['settings']['fields']['node']),	  );    $referred_nhpid_types = array_diff_key($all_nhpid_types,$referred_types);  	foreach($referred_types as $referred_type=>$referred_fields){      $form['tpd_field_reference_referred_fields'][$referring_field]['old_referred_types'][$referred_type] = array(		    '#type' => 'fieldset',		    '#title' => t("Referred Fields from node type $referred_type"),		    '#collapsible' => TRUE,		    '#collapsed' => false,		  );			$form['tpd_field_reference_referred_fields'][$referring_field]['old_referred_types'][$referred_type]['fields'] = array(		    '#type' => 'checkboxes',		    //'#title' => t("Referred field: $referred_type"),		    '#options' => $all_possible_referred_fields[$referred_type],		    '#default_value' => $referred_fields,		  );      unset($all_possible_referred_fields[$referred_type]);		}    $form['tpd_field_reference_referred_fields'][$referring_field]['new_referred_types'] = array(	    '#type' => 'fieldset',	    '#title' => t("New Referred Fields"),	    '#collapsible' => TRUE,	    '#collapsed' => TRUE,	  );    //drupal_set_message(nhpid_api_dump($nhpid_types, 'blue', TRUE));		foreach($referred_nhpid_types as $possible_referred_type=>$possible_referring_type_name){    	//if(in_array($possible_referred_type, array_keys($referred_types))) continue;			$form['tpd_field_reference_referred_fields'][$referring_field]['new_referred_types'][$possible_referred_type] = array(		    '#type' => 'fieldset',		    '#title' => t($possible_referring_type_name),		    '#collapsible' => TRUE,		    '#collapsed' => TRUE,		  );      $possible_referred_fields = isset($all_possible_referred_fields[$possible_referred_type]) ? $all_possible_referred_fields[$possible_referred_type]: array();      //$possible_referred_fields = field_info_instances('node', $possible_referred_type);			$form['tpd_field_reference_referred_fields'][$referring_field]['new_referred_types'][$possible_referred_type]['fields'] = array(		    '#type' => 'checkboxes',		    '#title' => t("Referred Fields"),		    '#options' => $possible_referred_fields,		  );		}	}  $nhpid_types = get_all_nhpid_data_node_types();  	$fc_referring_fields = isset($all_fc_referring_fields[$referring_type]) ? $all_fc_referring_fields[$referring_type] : array();  //drupal_set_message(nhpid_api_dump($fc_referring_fields, 'blue', TRUE));	foreach($fc_referring_fields as $fc_referring_field => $fc_referring_field_info){		$fc_referring_field_label = $fc_referring_field_info['label'];    $fc_referring_field_fields = $fc_referring_field_info['fields'];  	$form['tpd_field_reference_referred_fields'][$fc_referring_field] = array(	    '#type' => 'fieldset',	    '#title' => t("Referring field: $fc_referring_field_label"),	    '#collapsible' => TRUE,	    '#collapsed' => false,	  );		foreach($fc_referring_field_fields as $fc_referring_field_field => $fc_referring_field_field_name){			$referring_field_field = field_info_field($fc_referring_field_field);					//drupal_set_message(nhpid_api_dump($referring_field_field['settings']['fields']['node'], 'blue', TRUE));			$referred_types = isset($referring_field_field['settings']['fields']['node'])? $referring_field_field['settings']['fields']['node'] : array();      $form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field] = array(		    '#type' => 'fieldset',		    '#title' => t("Referring field: $fc_referring_field_field_name"),		    '#collapsible' => TRUE,		    '#collapsed' => false,		  );			$form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['old_referred_types'] = array(		    '#type' => 'fieldset',		    '#title' => t("Existing referring fields"),		    '#collapsible' => TRUE,		    '#collapsed' => false,				'#access'=>!empty($referring_field_field['settings']['fields']['node']),		  );      $referred_nhpid_types = array_diff_key($all_nhpid_types,$referred_types);	  	foreach($referred_types as $referred_type=>$referred_fields){	      $form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['old_referred_types'][$referred_type] = array(			    '#type' => 'fieldset',			    '#title' => t("Referring fields: $referred_type"),			    '#collapsible' => TRUE,			    '#collapsed' => false,			  );				$form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['old_referred_types'][$referred_type]['fields'] = array(			    '#type' => 'checkboxes',			    //'#title' => t("Referred field: $referred_type"),			    '#options' => $all_possible_referred_fields[$referred_type],			    '#default_value' => $referred_fields,			  );	      unset($nhpid_types[$referred_type]);			}	    $form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['new_referred_types'] = array(		    '#type' => 'fieldset',		    '#title' => t("New referring fields"),		    '#collapsible' => TRUE,		    '#collapsed' => TRUE,		  );	    //drupal_set_message(nhpid_api_dump($nhpid_types, 'blue', TRUE));      			foreach($referred_nhpid_types as $possible_referred_type=>$possible_referring_type_name){	    	//if(in_array($possible_referred_type, array_keys($referred_types))) continue;				$form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['new_referred_types'][$possible_referred_type] = array(			    '#type' => 'fieldset',			    '#title' => t($possible_referring_type_name),			    '#collapsible' => TRUE,			    '#collapsed' => TRUE,			  );	      $possible_referred_fields = $all_possible_referred_fields[$possible_referred_type];	      //$possible_referred_fields = field_info_instances('node', $possible_referred_type);				$form['tpd_field_reference_referred_fields'][$fc_referring_field][$fc_referring_field_field]['new_referred_types'][$possible_referred_type]['fields'] = array(			    '#type' => 'checkboxes',			    '#title' => t("Referred field"),			    '#options' => $possible_referred_fields,			  );			}		}	}  //drupal_set_message(nhpid_api_dump($form_state['clicked_button']['#id'], 'blue', TRUE));  $form['tpd_field_reference_referred_fields']['save']=array(  '#type' => 'submit',    '#value' => t('Save'),		'#access' => isset($form_state['clicked_button']) and $form_state['clicked_button']['#id'] == 'edit-nhpid-field-reference-referred-fields-update-referring-type',    '#name' => "tpd_field_reference_referred_fields_" . $referring_type . "_save",    '#limit_validation_errors' => array(array('tpd_field_reference_referred_fields')),		'#submit' => array('tpd_field_dependency_form_submit'),  );	// Workflow states  $form['tpd_field_reference_visible_wkf_states'] = array(    '#type' => 'fieldset',    '#title' => t('Referred node workflow states visible to referring fields'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );	$workflow_name='nhpd_tpd';	$sql = "select ws.sid, ws.state from {workflow_states} ws, {workflows} w where ws.sid > 1 and ws.wid = w.wid and w.name=:workflow_name order by ws.weight";  $wfs = array();  $result = db_query($sql, array(':workflow_name'=>$workflow_name));  $default_states = array();  while ($wf = $result->fetchAssoc()) {    $wfs[$wf['sid']] = $wf['state'];    if ($wf['state'] == 'Published') $default_states[] = $wf['state'];    if ($wf['state'] == 'Validated') $default_states[] = $wf['state'];  }  $wf_state = !empty($form_state['values']['tpd_field_reference_visible_wkf_states']['nhpid_visible_wkf_states']) ? $form_state['values']['tpd_field_reference_visible_wkf_states']['nhpid_visible_wkf_states'] : variable_get('nhpid_visible_wkf_states', $default_states);    $form['tpd_field_reference_visible_wkf_states']['nhpid_visible_wkf_states'] = array(    '#type' => 'checkboxes',     '#title' => t('Select one or two workflow State(s). If no states selected, all states are in effective.'),    '#options' => $wfs,    '#multiple' => TRUE,    '#default_value' => $wf_state,    '#description' => t('Depending nodes can only see their depended nodes at selected states.'),  );  $form['tpd_field_reference_visible_wkf_states']['save']=array(    '#type' => 'submit',    '#value' => t('Save'),    '#name' => 'tpd_field_reference_visible_wkf_states_save',    '#limit_validation_errors' => array(array('tpd_field_reference_visible_wkf_states'),																				array('mapped_fields'),),		'#submit' => array('tpd_field_dependency_form_submit'),  );  // dropdown list labels	$all_referred_fields = field_reference_get_all_referred_fields();	$labels = variable_get('nhpid_field_reference_list_labels', array());  $form['tpd_field_reference_referred_field_label'] = array(    '#type' => 'fieldset',    '#title' => t('Referred fields label'),    '#collapsible' => TRUE,    '#collapsed' => TRUE,  );	foreach($all_referred_fields as $entity_type => $referred_entities){    $form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'] = array(	    '#type' => 'fieldset',	    '#title' => "Entity Type: $entity_type",	    '#collapsible' => TRUE,	    '#collapsed' => FALSE,	  );    $form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'][$entity_type] = array(	    '#type' => 'fieldset',	    '#title' => "Label field",	    '#collapsible' => TRUE,	    '#collapsed' => FALSE,	  );    ksort($referred_entities);    //drupal_set_message(nhpid_api_dump($referred_entities, 'blue', TRUE));		foreach($referred_entities as $bundle => $referred_fields_name){      $form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'][$entity_type][$bundle] = array(		    '#type' => 'fieldset',		    '#title' => "Entity: $bundle",		    '#collapsible' => TRUE,		    '#collapsed' => TRUE,		  );			$all_possible_label_fields = get_node_type_field_name_title_mapping($bundle);      			foreach($referred_fields_name as $key => $referred_field_name){        $form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'][$entity_type][$bundle][$key] = array(			    '#type' => 'fieldset',			    '#title' => "Field: $key",			    '#collapsible' => TRUE,			    '#collapsed' => FALSE,			  );        //drupal_set_message(nhpid_api_dump($form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'], 'blue', TRUE));				unset($all_possible_label_fields[$key]);        $all_possible_label_fields = array_merge(array('' => '--none--'), $all_possible_label_fields);				$label_field = !empty($form_state['values']['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'][$entity_type][$bundle][$key]['label_field']) ? $form_state['values']['tpd_field_reference_referred_field_label'][$entity_type][$bundle][$key]['label_field'] : $labels[$entity_type][$bundle][$key]['label_field'];        $form['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'][$entity_type][$bundle][$key]['label_field'] = array(          '#type' => 'select',			    //'#title' => t("Referred field: $referred_type"),			    '#options' => $all_possible_label_fields,			    '#default_value' => $label_field,				);			}		}	}  $form['tpd_field_reference_referred_field_label']['save']=array(  '#type' => 'submit',    '#value' => t('Save'),		//'#access' => $form_state['clicked_button']['#id'] == 'edit-nhpid-field-reference-referred-fields-update-referring-type',    '#name' => "nhpid-field-reference-referred-field-label-save",    '#limit_validation_errors' => array(array('tpd_field_reference_referred_field_label')),		'#submit' => array('tpd_field_dependency_form_submit'),  );	//reset field reference option lists	$referring_fields = field_reference_get_all_referring_fields();  $form['reset_field_reference_option_lists'] = array(  '#type' => 'fieldset',  '#title' => t('Reset field reference option lists'),  '#collapsible' => TRUE,  '#collapsed' => TRUE,  );  $form['reset_field_reference_option_lists']['help']=array(    '#type' => 'item',    '#markup' => "This tool resets all field reference option lists. It takes a prolonged period of time if you select all fields or a large number of fields.",  );  foreach ($referring_fields as $referring_field) {		$table_select_referring_fields[$referring_field]=array('referring_field'=>$referring_field);  }  $selected_referring_fields = !empty($form_state['values']['reset_field_reference_option_lists']['referring_fields']) ? $form_state['values']['reset_field_reference_option_lists']['referring_fields'] : array();	$header=array('referring_field'=>"Referring Fields");  $form['reset_field_reference_option_lists']['referring_fields'] = array(    '#type' => 'tableselect',    '#header' => $header,    '#js_select' => TRUE,    '#title' => t('Select Referring Fields'),    '#options' => $table_select_referring_fields,    '#default_value' => $selected_referring_fields,    '#required' => TRUE,    '#description' => t('Select one or more referring_fields'),  );	$form['reset_field_reference_option_lists']['save']=array(    '#type' => 'submit',    '#value' => t('Reset field_reference option lists'),		'#name' => 'reset_field_reference_option_lists_save',    '#limit_validation_errors' => array(array('reset_field_reference_option_lists'),),		'#submit' => array('tpd_field_dependency_form_submit'),	);	  return $form;}function tpd_field_dependency_form_validate($form, &$form_state) {	switch ($form_state['clicked_button']['#id']) {        case "edit-nhpid-field-reference-visible-wkf-states-save":		/*    $states = $form_state['values']['tpd_field_reference_visible_wkf_states']['nhpid_visible_wkf_states'];    $count = 0;    foreach ($states as $state) {      if ($state) $count ++;    }        if ($count > 2 ) {      form_set_error('nhpid_field_dependency_visible_wkf_states][tpd_field_reference_visible_wkf_states][nhpid_visible_wkf_states', 'No more than two states can be selected.');    }		*/    break;      }}function tpd_field_dependency_form_submit($form, &$form_state) {   //drupal_set_message(nhpid_api_dump($form_state['clicked_button']['#id'], 'purple', TRUE));  //drupal_set_message(nhpid_api_dump($form_state, 'purple', TRUE));  //drupal_set_message(nhpid_api_dump($form['summary'], 'green', TRUE));  switch ($form_state['clicked_button']['#id']) {        case "edit-tpd-field-reference-visible-wkf-states-save":		case "edit-save-all":      $states = array_values($form_state['values']['tpd_field_reference_visible_wkf_states']['nhpid_visible_wkf_states']);      $rtn = array();      foreach ($states as $sid => $state) {        if ($state) $rtn[$sid] = $state;      }      variable_set('nhpid_visible_wkf_states', $rtn);      field_reference_update_all_cached_option_lists();      break;      case 'edit-reset-field-reference-option-lists-save':      $selected_referring_fields = $form_state['values']['reset_field_reference_option_lists']['referring_fields'];			foreach($selected_referring_fields as $key => $selected_referring_field){				if (!$selected_referring_field) unset($selected_referring_fields[$key]);			}			//drupal_set_message(nhpid_api_dump($selected_referring_fields, 'blue', TRUE));			field_reference_update_all_cached_option_lists(NULL, NULL, $selected_referring_fields);			drupal_set_message('Field reference catched option lists have been updated.');			break;		case 'edit-tpd-field-reference-referred-fields-update-referring-type':			break;    case 'edit-tpd-field-reference-referred-fields-save':      $referring_type = $form_state['values']['tpd_field_reference_referred_fields']['refering_type'];			$referring_fields = $form_state['values']['tpd_field_reference_referred_fields']['fields'];      //drupal_set_message(nhpid_api_dump($form_state['values']['tpd_field_reference_referred_fields'], 'blue', TRUE));			foreach ($referring_fields as $referring_field => $referring_field_name){				$referred_fields_settings = array();				$old_referred_types = $form_state['values']['tpd_field_reference_referred_fields'][$referring_field]['old_referred_types'];        //drupal_set_message(nhpid_api_dump($old_referred_types, 'blue', TRUE));				foreach ($old_referred_types as $old_referred_type=>$fields){        //drupal_set_message(nhpid_api_dump($fields, 'blue', TRUE));					foreach ($fields['fields'] as $field){           if($field) $referred_fields_settings[$old_referred_type][$field]=$field;           //drupal_set_message(nhpid_api_dump($referred_fields_settings, 'blue', TRUE));					}				}        $new_referred_types = $form_state['values']['tpd_field_reference_referred_fields'][$referring_field]['new_referred_types'];        //drupal_set_message(nhpid_api_dump($new_referred_types, 'blue', TRUE));				foreach ($new_referred_types as $new_referred_type=>$fields){        //drupal_set_message(nhpid_api_dump($fields, 'blue', TRUE));					foreach ($fields['fields'] as $field){           if($field) $referred_fields_settings[$new_referred_type][$field]=$field;           //drupal_set_message(nhpid_api_dump($referred_fields_settings, 'blue', TRUE));					}				}				$field_settings = field_read_field($referring_field);        $field_settings['settings']['fields']['node']=$referred_fields_settings;        //drupal_set_message(nhpid_api_dump($field_settings, 'blue', TRUE));        field_update_field($field_settings);        field_reference_update_all_cached_option_lists('node', $referring_type, array_keys($referring_fields));			}      $fc_referring_fields = $form_state['values']['tpd_field_reference_referred_fields']['fc_fields'];      //drupal_set_message(nhpid_api_dump($form_state['values']['tpd_field_reference_referred_fields'], 'blue', TRUE));			foreach ($fc_referring_fields as $fc_referring_field => $referring_field_info){        foreach ($referring_field_info['fields'] as $referring_field => $referring_field_info){					$referred_fields_settings = array();					$old_referred_types = $form_state['values']['tpd_field_reference_referred_fields'][$fc_referring_field][$referring_field]['old_referred_types'];	        //drupal_set_message(nhpid_api_dump($old_referred_types, 'blue', TRUE));					foreach ($old_referred_types as $old_referred_type=>$fields){	        //drupal_set_message(nhpid_api_dump($fields, 'blue', TRUE));						foreach ($fields['fields'] as $field){	           if($field) $referred_fields_settings[$old_referred_type][$field]=$field;	           //drupal_set_message(nhpid_api_dump($referred_fields_settings, 'blue', TRUE));						}					}	        $new_referred_types = $form_state['values']['tpd_field_reference_referred_fields'][$fc_referring_field][$referring_field]['new_referred_types'];	        //drupal_set_message(nhpid_api_dump($new_referred_types, 'blue', TRUE));					foreach ($new_referred_types as $new_referred_type=>$fields){	        //drupal_set_message(nhpid_api_dump($fields, 'blue', TRUE));						foreach ($fields['fields'] as $field){	           if($field) $referred_fields_settings[$new_referred_type][$field]=$field;	           //drupal_set_message(nhpid_api_dump($referred_fields_settings, 'blue', TRUE));						}					}					$field_settings = field_read_field($referring_field);	        $field_settings['settings']['fields']['node']=$referred_fields_settings;	        //drupal_set_message(nhpid_api_dump($field_settings, 'blue', TRUE));	        field_update_field($field_settings);	        field_reference_update_all_cached_option_lists('field_collection_item', $fc_referring_field, array_keys($referring_field_info['fields']));          				}			}						break;		case 'edit-tpd-field-reference-referred-field-label-save':    //case "edit-save-all":			$old_list_labels = variable_get('nhpid_field_reference_list_labels', array());			$new_list_labels = $form_state['values']['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data'];      variable_set('nhpid_field_reference_list_labels', $form_state['values']['tpd_field_reference_referred_field_label']['tpd_field_reference_referred_field_label_data']);			foreach($new_list_labels as $entity_type => $info){				foreach($info as $bundle => $fields){					foreach($fields as $field_name => $label_field){						if (!isset($old_list_labels[$entity_type][$bundle][$field_name]) or $old_list_labels[$entity_type][$bundle][$field_name]['label_field'] != $new_list_labels[$entity_type][$bundle][$field_name]['label_field'] ){              $rtn = field_reference_update_all_cached_option_lists_by_referred_entity($entity_type, $bundle);						}					}				}			}			      //field_reference_update_all_cached_option_lists();			break;    default:  }  if (isset($form_state['values']['mapped_fields'])) variable_set('nhpid_field_mapping_mapped_fields', $form_state['values']['mapped_fields']);  $form_state['storage']['values'] = $form_state['values'];  $form_state['rebuild'] = TRUE;}/*** * Rule archive and resstore */ function tpd_rule_archive_form($form, &$form_state=NULL) {	$form['#tree'] = TRUE;  $form['#attributes'] = array('enctype' => "multipart/form-data");  $data = !empty($form_state['values']['data']) ? $form_state['values']['data'] : '';  $form['help']=array(    '#type' => 'item',    '#markup' => "This tool lets users to archive all NHPID rules to file and upload archived rule to Drupal. It is suggested that the rules should be archived after any additions and modifications.",  );  $form['archive']=array(    '#type' => 'fieldset',    '#title' => t('Archive rules'),    '#collapsible' => TRUE,    '#collapsed' => FALSE,   );      $form['archive']['archive']=array(  '#type' => 'submit',   '#value' => t('Archive'),   );  $form['upload']=array(    '#type' => 'fieldset',    '#title' => t('Restore Archived Rules'),    '#collapsible' => TRUE,    '#collapsed' => FALSE,   );    $form['upload']['file']=array(    '#name' => 'files[file]',		'#type' => 'file',     '#default_value' => $data,    '#title' => t('Archived rule file'),   );  $form['upload']['upload']=array(    '#type' => 'submit',     '#value' => t('Upload'),   );  return $form;}function tpd_rule_archive_form_submit($form, &$form_state) {  //drupal_set_message(nhpid_api_dump($form_state, 'red', TRUE));	switch ($form_state['clicked_button']['#id']) {    case 'edit-archive-archive':      $rules = array();      $rule_variable_id_root = 'nhpid_';      $sql ="select * from {variable} where name like :name ";      $result = db_query($sql, array(':name' => $rule_variable_id_root . "%"));      while ($r = $result->fetchAssoc()) {        $name = $r['name'];        $value = variable_get($name, '');        $rules[] = array('name' => $name, 'value' => $value);      }      $data = serialize($rules);      $data = str_replace("\n", "~TEMP~", $data); // unserialize does not work with string contain '/n'      $file = "nhpid_rule_archive.txt";      $uploaded_data_file_path =  "public://rules/";      //$uploaded_data_file_split_path = $uploaded_data_file_path . '/split';      $public_file_stream_wrapper = file_stream_wrapper_get_instance_by_scheme('public');      if (!$public_file_stream_wrapper->dir_opendir($uploaded_data_file_path, null)) file_prepare_directory($uploaded_data_file_path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);      file_unmanaged_save_data($data, "$uploaded_data_file_path/$file", FILE_EXISTS_REPLACE);      $path = "$uploaded_data_file_path$file";      nhpid_api_download($path);            break;    case 'edit-upload-upload':      //drupal_set_message(nhpid_api_dump($_FILES, 'red', TRUE));      $file = file_save_upload('file');      if ($file) {        $data = file_get_contents($file -> destination);        $data = str_replace("~TEMP~", "\n", $data);        $rules = unserialize($data);        foreach ($rules as $rule) {          variable_set($rule['name'], $rule['value']);        }        drupal_set_message('The NHPID rules have been restored successfully.');      }      else {        form_set_error('file', 'The NHPID rules have not been restored successfully. Please double check your archived file and try it again.');      }      break;  }    $form_state['storage']['values'] = $form_state['values'];}function tpd_lock_system_form($form, &$form_state=NULL) {	global $user;	$lock_persistent = variable_get(DATA_EXPORTING_LOCK_VARIABLE, 0);  $lock_temp = variable_get(DATA_EXPORTING_LOCK_TEMP_VARIABLE, 0);  $form['lock'] = array(    '#title' => 'Lock system persistently',    '#type' => 'fieldset',    '#collapsible' => TRUE,    '#collapsed' => false,		);  $form['lock']['description'] = array(    '#type' => 'item',    '#title' => "",    '#markup' => t('Locking the system persistently will block other users to edit nhpid data. If you would like to lock the system persistently, press "Lock". The lock has to be released manually by clicking "Release". All users except one who locks the system are unable to save data.'),  );  $locker_uid = variable_get(SYSTEM_LOCK_VARIABLE, null);  $email_link = null;  if ($user->uid != $locker_uid){		$locker = user_load($locker_uid);		$locker_name = $locker -> name;    if (user_access('access nhpid email') and $locker-> uid != $user -> uid) $email_link = l("Ask info", "nhpid_email/$locker_uid", array('attributes' => array('target' => '_blank')));  }	else{    $locker_name = 'you';	}  $form['lock']['persistent_status'] = array(    '#type' => 'item',    '#markup' => t("<span style='text-decoration: blink'><em>The system is locked persistently by $locker_name.</em></span> $email_link"),    '#access' => $lock_persistent,  );  $form['lock']['lock-lock'] = array(    '#type' => 'submit',    '#value' => t('Lock'),    '#access' => !$lock_persistent,  );  $form['lock']['release-lock'] = array(    '#type' => 'submit',    '#value' => t('Release'),    '#access' => $lock_persistent,  );	if ($lock_temp){    $form['lock_temp'] = array(	    '#title' => 'Release temporarily system lock for exporting',	    '#type' => 'fieldset',	    '#collapsible' => TRUE,	    '#collapsed' => false,			);	  $form['lock_temp']['description'] = array(	    '#type' => 'item',	    '#title' => "",	    '#description' => t('The system is currently temporarily locked. This means a data exporting process is running, or a exporting process was crashed. If there are no active exporting processes in progress, please release the lock.'),	  );    $form['lock_temp']['release-lock-temp'] = array(    '#type' => 'submit',    '#value' => t('Release'),    '#access' => $lock_temp,  );	}  return $form;}function tpd_lock_system_form_submit($form, &$form_state) {   switch ($form_state['clicked_button']['#id']) {   case 'edit-release-lock':      # relase lock      variable_set(SYSTEM_LOCK_VARIABLE, NULL);      break;  	case 'edit-release-lock-temp':      # relase lock      variable_set(DATA_EXPORTING_LOCK_TEMP_VARIABLE, 0);      break;        case 'edit-lock-lock':      #  lock system from saving data persistently      global $user;      variable_set(SYSTEM_LOCK_VARIABLE, $user -> uid);      break;	 }	 $form_state['rebuild'] = TRUE;}function tpd_report_form($form, &$form_state=NULL) {	$chart_library = 'highcharts'; // 'google'	$form['#tree'] = TRUE;	$form['help']=array(		'#type' => 'item',		'#markup' => "",	);	$form['tp_status']= array(    '#title' => 'TP Status',    '#type' => 'fieldset',    '#collapsible' => TRUE,    //'#collapsed' => !in_array($form_state['clicked_button']['#id'], array('edit-tp-status-submit', 'edit-submit', NULL)),	);	//$tp_status_code_ids = get_code_entity_ids($code_node_type);	$all_tp_statuses = tpd_get_code_entity_ids('code_tp_status', array(), false);	$all_tp_statuses_tableselect = array();	foreach ($all_tp_statuses as $tp_status => $tp_status_id){		$all_tp_statuses_tableselect[$tp_status] = array('tp_status'=>$tp_status);	}	$selected_tp_statuses = !(empty($form_state['values']['tp_status']['tp_status'])) ? $form_state['values']['tp_status']['tp_status'] : $all_tp_statuses_tableselect;	//drupal_set_message(nhpid_api_dump($selected_tp_statuses, 'red', TRUE));	$tableselect_header=array('tp_status'=>"TP Status");	$form['tp_status']['tp_status']= array(		'#type' => 'tableselect',		'#header' => $tableselect_header,		'#js_select' => TRUE,		'#title' => 'TP Status',		'#default_value' => $selected_tp_statuses,		'#options' => $all_tp_statuses_tableselect,		'#required' => TRUE,    //'#description' => t('When a poll is closed, visitors can no longer vote for it.'),	);	$form['tp_status']['submit']= array(		'#type' => 'submit',		'#value' => t('Report'),		'#name' => "tpd_status_user_type_submit",		'#limit_validation_errors' => array(array('tp_status')),		'#submit' => array('tpd_report_form_submit'),	);	//dpm($form_state);	if (array_key_exists('clicked_button', $form_state) and (in_array($form_state['clicked_button']['#id'], array('edit-tp-status-submit', 'edit-submit', NULL)))){		//dpm($form_state);		$rows = array();		$chart_labels = array();		$chart_data = array();		$total = 0;				foreach ($selected_tp_statuses as $tp_status => $value){			if(!$value) continue;			$company_count = tpd_get_company_count_by_current_tp_status($tp_status);			$rows[] = array($tp_status, $company_count);			$total = $total + $company_count;			$chart_data[] = intval($company_count);		}		$i = 0;		foreach ($selected_tp_statuses as $tp_status => $value){			if(!$value) continue;			$percent = round($chart_data[$i] /$total * 100, 2);			$chart_labels[] = t("!tp_status (!num)" , array('!tp_status' => $tp_status, '!num' => $chart_data[$i]));			array_push($rows[$i], $percent);			$i ++;		}		$header = array('TP Status', 'Partner Count', 'Percentage');				$rows[] = array('Grand Total', $total);		$result_table = theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => Null, 'caption' => Null,'colgroups' => Null,'sticky' => True,'empty' => '',));		$form['tp_status']['result']= array(	    '#type' => 'item',	    '#markup' => $result_table,		);		$form['tp_status']['chart']= array(	    '#type' => 'chart',	    //'#title' => t('Pie simple'),		'#title_position' => 'in',	    '#chart_type' => 'pie',		'#chart_library' => $chart_library,	    '#legend_position' => 'right',	    '#data_labels' => TRUE,	    '#tooltips' => TRUE,		'#width' => NULL,    	'#height' => null,		'#chart_id' => 'tp_status',		);		//$chart_labels = array('a', 'b', 'c', 'd','e','f', 'g','h', 'i');		//$chart_data = array(307,14,12,1,3,2,2,11,11);		//drupal_set_message(nhpid_api_dump($chart_labels, 'red', TRUE));		//drupal_set_message(nhpid_api_dump($chart_data, 'red', TRUE));		$form['tp_status']['chart']['pie_data'] = array(			'#type' => 'chart_data',			'#title' => t('Enrolment Status'),			'#labels' => $chart_labels,			'#data' => $chart_data,		);	}	$form['amendment_status']= array(    '#title' => 'Amendment Status',    '#type' => 'fieldset',    '#collapsible' => TRUE,    //'#collapsed' => !array_key_exists('edit-amendment-status-submit', $form_state['input']) or  array_key_exists('edit-submi', $form_state['input']),	);	//$tp_status_code_ids = get_code_entity_ids($code_node_type);	$all_amendment_statuses = tpd_get_code_entity_ids('code_amendment_status', array(), False);	$all_amendment_statuses_tableselect = array();	foreach ($all_amendment_statuses as $key => $value){		$all_amendment_statuses_tableselect[$key] = array('amendment_status'=>$key);	}	$selected_amendment_statuses = !(empty($form_state['values']['amendment_status']['amendment_status'])) ? $form_state['values']['amendment_status']['amendment_status'] : $all_amendment_statuses;	$tableselect_header=array('amendment_status'=>"Amendment Status");	$form['amendment_status']['amendment_status']= array(		'#type' => 'tableselect',		'#header' => $tableselect_header,		'#js_select' => TRUE,		'#title' => 'Amendment status',		'#default_value' => $selected_amendment_statuses,		'#options' => $all_amendment_statuses_tableselect,		'#required' => TRUE,    //'#description' => t('When a poll is closed, visitors can no longer vote for it.'),	);	$form['amendment_status']['submit']= array(    '#type' => 'submit',    '#value' => t('Report'),    '#name' => "amendment_status_user_type_submit",    '#limit_validation_errors' => array(array('amendment_status')),		'#submit' => array('tpd_report_form_submit'),	);	if (array_key_exists('clicked_button', $form_state) and (in_array($form_state['clicked_button']['#id'], array('edit-amendment-status-submit', 'edit-submit', NULL)))){			$rows = array();		$chart_labels2 = array();		$chart_data2 = array();		$total = 0;		//drupal_set_message(nhpid_api_dump($selected_amendment_statuses, 'red', TRUE));		foreach ($selected_amendment_statuses as $selected_amendment_status => $value){			if(!$value) continue;			$company_count = tpd_get_company_count_by_amendment_status($selected_amendment_status);			$rows[] = array($selected_amendment_status, $company_count);			$total = $total + $company_count;			$chart_data2[] = intval($company_count);		}		$i = 0;		foreach ($selected_amendment_statuses as $selected_amendment_status => $value){		if(!$value) continue;			$percent = round($chart_data2[$i] /$total * 100, 2);			array_push($rows[$i], $percent);			$chart_labels2[] = t("!tp_status (!num)" , array('!tp_status' => $selected_amendment_status, '!num' => $chart_data2[$i]));			$i ++;		}		$header = array('Amendment Status', 'Partner Count', 'Percentage');		$rows[] = array('Grand Total', $total);		$result_table = theme_table(array('header' => $header, 'rows' => $rows, 'attributes' => Null, 'caption' => Null,'colgroups' => Null,'sticky' => True,'empty' => '',));		$form['amendment_status']['result']= array(	    '#type' => 'item',	    '#markup' => $result_table,		);		$form['amendment_status']['chart']= array(	    '#type' => 'chart',	    //'#title' => t('Pie simple'),		'#title_position' => 'in',	    '#chart_type' => 'pie',	    '#chart_library' => $chart_library,	    '#legend_position' => 'bottom',	    '#data_labels' => TRUE,	    '#tooltips' => FALSE,		'#width' => NULL,    	'#height' => null,		'#data_labels' => TRUE,		'#chart_id' => 'tp_amendment_status',	  );    //$chart_labels = array('a', 'b', 'c', 'd','e','f', 'g','h', 'i');    //$chart_data = array(307,14,12,1,3,2,2,11,11);    //drupal_set_message(nhpid_api_dump($chart_labels, 'red', TRUE));    //drupal_set_message(nhpid_api_dump($chart_data, 'red', TRUE));	  $form['amendment_status']['chart']['pie_data'] = array(	    '#type' => 'chart_data',	    '#title' => t('Amendment Status'),	    '#labels' => $chart_labels2,	    '#data' => $chart_data2,	  );	}  $form['submit']= array(    '#type' => 'submit',    '#value' => t('Report All'),    '#name' => "tpd_submit",    //'#limit_validation_errors' => array(array('tp_status')),		'#submit' => array('tpd_report_form_submit'),	);  return $form;}function tpd_report_form_submit($form, &$form_state){  $form_state['storage']['values'] = $form_state['values'];  $form_state['rebuild'] = TRUE;}function tpd_enforce_revision_log_form($form, &$form_state=NULL) {  $enforce_revision_log = !empty($form_state['values']['nhpid_enforce_revision_log']) ? $form_state['values']['nhpid_enforce_revision_log'] : variable_get('nhpid_enforce_revision_log', 0);  $enforce_revision_log_warning_message = !empty($form_state['values']['nhpid_enforce_revision_log_warning_message']) ? $form_state['values']['nhpid_enforce_revision_log_warning_message'] : variable_get('nhpid_enforce_revision_log_log_warning_message', "Please enter the revision log message and check the 'Create new revision' checkbox.");  $form['help']=array(    '#type' => 'item',    '#markup' => "If enabled, users have to be enter revision log message and check 'Create new revision' for any updates of NHPID data nodes",  );  $form['nhpid_enforce_revision_log']=array(    '#type' => 'checkbox',    '#title' => "Enforce revision log message",    '#default_value' => $enforce_revision_log,  );  $form['nhpid_enforce_revision_log_warning_message']=array(    '#type' => 'textarea',    '#title' => "Warning message",    '#default_value' => $enforce_revision_log_warning_message,  );  $form['save']=array(    '#type' => 'submit',    '#value' => t('Save Setting'),  );  return $form;}function tpd_enforce_revision_log_form_submit($form, &$form_state) {  //drupal_set_message(nhpid_api_dump($form_state['values'], 'red', TRUE));  $nhpid_enforce_revision_log = $form_state['values']['nhpid_enforce_revision_log'];  $nhpid_enforce_revision_log_warning_message = $form_state['values']['nhpid_enforce_revision_log_warning_message'];  variable_set('nhpid_enforce_revision_log', $nhpid_enforce_revision_log);  variable_set('nhpid_enforce_revision_log_warning_message', $nhpid_enforce_revision_log_warning_message);  $form_state['storage']['values'] = $form_state['values'];	if($nhpid_enforce_revision_log){		drupal_set_message("Revision log is enforced.");	}  else{		drupal_set_message("Enforcement of revision log is released.");	}}
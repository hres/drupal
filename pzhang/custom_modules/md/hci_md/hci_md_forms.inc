<?php//***  * The admin panel * ***function hc_irc_inspection_event_reset_form($form, &$form_state=NULL) {	$form['#tree']=true;	$form['help'] = array(    '#type' => 'item',    '#markup' => t('This tool deletes and regenerates inspection calendar events associated with selected inspections.' ),  );  $date_format = 'Y-m-d';  $date_from = !empty($form_state['values']['date_from']) ? $form_state['values']['date_from'] : date($date_format, strtotime('-1 day'));  $date_to = !empty($form_state['values']['date_to']) ? $form_state['values']['date_to'] : date($date_format);  $form['date_from'] = array(    '#type' => 'date_popup',    '#title' => t('Inspection end date from'),    '#default_value' => $date_from,    '#date_format' => $date_format,    '#required' => TRUE,  );  $form['date_to'] = array(    '#type' => 'date_popup',    '#default_value' => $date_to,    '#title' => t('Inspection end date to'),    '#date_format' => $date_format,    '#required' => TRUE,  );          $form['submit'] = array(  '#type' => 'submit',  '#name' => 'submit',  '#value' => t('Reset inspection events')  );  return $form;  }function hc_irc_inspection_event_reset_form_submit(&$form, &$form_state){	//drupal_set_message(hc_irc_dump($form_state, 'red', TRUE));	$form_state['rebuild'] = TRUE;	$date_from = $form_state['values']['date_from'];  $date_to = $form_state['values']['date_to'];  $seconds_to_add = 24 * 3600 - 1; // set time the last second of the day  $timestamp_from = strtotime($date_from);  $timestamp_to = strtotime($date_to) + $seconds_to_add;  $query = new EntityFieldQuery();  $iids = $query->entityCondition('entity_type', 'node')    ->propertyCondition('type', 'gmp_iid')    ->propertyCondition('status', NODE_PUBLISHED)    ->fieldCondition('field_inspection_end_date', 'value', $timestamp_from, '>=')	->fieldCondition('field_inspection_end_date', 'value', $timestamp_to, '<=')    ->execute();		$iid_nids = array();  if(!empty($iids)) {    $iid_nids = array_keys($iids['node']);	//drupal_set_message(hc_irc_dump($iid_nids, 'red', TRUE));	foreach($iid_nids as $iid_nid){		$node = node_load($iid_nid);		hc_irc_set_inspection_calendar($node);	}  }  $query = new EntityFieldQuery();  $ircs = $query->entityCondition('entity_type', 'node')		->propertyCondition('type', 'gmp_irc')		->propertyCondition('status', NODE_PUBLISHED)		->fieldCondition('field_gmp_iid', 'target_id', $iid_nids, 'IN')		->execute();		//drupal_set_message(hc_irc_dump($ircs, 'red', TRUE));	if(!empty($ircs)) {		$irc_nids = array_keys($ircs['node']);		//drupal_set_message(hc_irc_dump($irc_nids, 'red', TRUE));		foreach($irc_nids as $irc_nid){			$node = node_load($irc_nid);			hc_irc_set_inspection_calendar($node);		}	  }}
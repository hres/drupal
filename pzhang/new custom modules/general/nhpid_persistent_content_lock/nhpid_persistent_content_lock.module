<?php /* -*- mode: php; indent-tabs-mode: nil; tab-width: 2; -*- */

/**
 * @file
 * Allows users to lock documents persistently for modification.
 */
define("NHPID_PERSISTENT_LOCK_VARIABLE", 'nhpiddms_persistent_lock');

/**
 * Implementation of hook_permission().
 */
function nhpid_persistent_content_lock_permission() {
  return array(
    'lock content persistently' => array(
      'title' => t('Lock content persistently'),
      'description' => t('Enables user to lock content persistently'),
      ),
    'release persistent lock' => array(
      'title' => t('Release persistent lock'),
      'description' => t('Enables user to release persistent lock'),
      ),
   );
}
/* hook_ctools_plugin_directory */
function nhpid_persistent_content_lock_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_menu().
 */
function nhpid_persistent_content_lock_menu() {
  $items['admin/content/nhpid_persistent_content_lock'] = array(
    'title' => 'Persistently locked documents',
    'page callback' => 'nhpid_persistent_content_lock_overview',
    'access callback' => 'user_access',
    'access arguments' => array('release persistent lock'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/content/nhpid_persistent_content_lock/release'] = array(
    'page callback' => 'nhpid_persistent_content_lock_release_item',
    'page arguments' => array(4, NULL),
    'access arguments' => array('release persistent lock'),
    'type' => MENU_CALLBACK,
  );
 
  $items['user/%user/release_persistent_lock'] = array(
    'title' => 'Persistently locked documents',
    'page callback' => 'nhpid_persistent_content_lock_overview',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('lock content persistently'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK
  );
  $items['user/%user/release_persistent_lock/releaseown'] = array(
    'page callback' => 'nhpid_persistent_content_lock_release_own_item',
    'page arguments' => array(4, TRUE, TRUE),
    'access arguments' => array('lock content persistently'),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/lock'] = array(
    'title' => 'Lock',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'nhpid_persistent_content_lock_node_tab_access',
    'access arguments' => array(1),
    'page callback' => 'nhpid_persistent_content_lock_page',
    'page arguments' => array(1),
    'weight' => 2,
  );

  return $items;
}
function nhpid_persistent_content_lock_menu_alter(&$items){
  //drupal_set_message(nhpid_api_dump($items, 'red', TRUE));
  $items['node/%node/edit']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  $items['node/%node/edit']['access arguments'] = array(1,'edit');

  $items['node/%node/revisions']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  $items['node/%node/revisions']['access arguments'] = array(1,'revisions');
  //$items['node/%node/revisions/%/delete']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  //$items['node/%node/revisions/%/delete']['access arguments'] = array(1,'revisions');
  //$items['node/%node/revisions/%/revert']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  //$items['node/%node/revisions/%/revert']['access arguments'] = array(1,'revisions');
	if (module_exists('nodehierarchy')){
  $items['node/%node/children']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  $items['node/%node/children']['access arguments'] = array(1,'children');
	}
	if (module_exists('workflow')){
  $items['node/%node/workflow']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  $items['node/%node/workflow']['access arguments'] = array(1,'workflow');
	}
	if (module_exists('clone')){
	$items['node/%node/clone/%clone_token']['type'] = MENU_LOCAL_TASK;
	$items['node/%node/clone/%clone_token']['access callback']='_nhpid_persistent_content_lock_node_access_callback';
  $items['node/%node/clone/%clone_token']['access arguments'] = array(1,'clone');
	}
  //drupal_set_message(nhpid_api_dump(&$items, 'green', TRUE));

}

/**
 * Implementation of hook_form_alter().
 */
function nhpid_persistent_content_lock_form_alter(&$form, &$form_state, $form_id) {
	
}

function nhpid_persistent_content_lock_node_access($node, $op, $account){
	global $user;
	switch($op){
		case 'update':
    ## blocks edting nhpid menu struture nodes by users other than admin
	  $nhpid_menu_node_types = array("nhpdtpd", "tpd_codes", "tpd_data","tpd_data_nodes");
	  if (in_array($node -> type, $nhpid_menu_node_types)){
			if($user -> uid == 1) {
	    	return NODE_ACCESS_IGNORE;
			}
			else{
				return NODE_ACCESS_DENY;
			}
	  }
	  

	  if(nhpid_api_is_a_nhpid_data_node_type($node->type)) {
	    if (user_access('lock content persistently', $account)){
        $lock_status = nhpid_persistent_content_lock_status($node->nid);
				if ($lock_status) {
          $locker_uid = $lock_status->uid;
					if($locker_uid==$account->uid){
		        return NODE_ACCESS_IGNORE;
					}
					else{
		        return NODE_ACCESS_DENY;
					}

		    }
				else{
	        return NODE_ACCESS_IGNORE;
				}
			}
	    else {
	      return NODE_ACCESS_DENY;
	    }

	  }
	  return NODE_ACCESS_IGNORE;
		break;
		default:
		return NODE_ACCESS_IGNORE;
	}

}
function nhpid_persistent_content_lock_page_alter(&$page){
	//drupal_set_message(nhpid_api_dump($page, 'green', TRUE));
}
function nhpid_persistent_content_lock_node_view($node,  $view_mode, $langcode){
  global $user;
	//If node is persistently locked
  $lock_status = nhpid_persistent_content_lock_status($node->nid);

	if ($lock_status){
    $locker_uid = $lock_status->uid;
		$locker_name = $lock_status->user_name;
		$lock_time = format_date($lock_status->timestamp);
		if ($user->uid != $locker_uid){
      if (user_access('access nhpid email') ) $email_link = l(" or ask info", "nhpid_email/$locker_uid",array('attributes' => array('target' => '_blank')));
      $msg = "The content is locked persistently by $locker_name since $lock_time. You are not allowed to edit the content at this moment. Please try it again a few moments later$email_link.";
      drupal_set_message($msg, 'warning');
 		}
		else{
      $msg = "The content is locked persistently by you since $lock_time. If the lock is no more necessary, please release it.";
      drupal_set_message($msg, 'warning');
	 	}
	}
}
function nhpid_persistent_content_lock_node_prepare($node){
  global $user;
	//If node is persistently locked
  $lock_status = nhpid_persistent_content_lock_status($node->nid);
	if ($lock_status){
    $locker_uid = $lock_status->uid;
		$locker_name = $lock_status->user_name;
		$lock_time = format_date($lock_status->timestamp);
		if ($user->uid != $locker_uid){
      if (user_access('access nhpid email') ) $email_link = l(" or ask info", "nhpid_email/$locker_uid",array('attributes' => array('target' => '_blank')));
      $msg = "The content is locked persistently by $locker_name since $lock_time. You are not allowed to edit the content at this moment. Please try it again a few moments later$email_link.";
      drupal_set_message($msg, 'warning');
      drupal_goto( $_SERVER['HTTP_REFERER'] );
 		}
		else{
      $msg = "The content is locked persistently by you since $lock_time. If the lock is no more necessary, please release it.";
      drupal_set_message($msg, 'warning');
	 	}
	}
}
function nhpid_persistent_content_lock_page($node = NULL){
  return drupal_render(drupal_get_form('nhpid_persistent_content_lock_tab_form', $node));
}

function nhpid_persistent_content_lock_tab_form($form_id, &$form_state, $node = NULL){
	global $user;
  $form = array();
	$lock_status = nhpid_persistent_content_lock_status($node->nid);
  $form['help'] = array(
      '#type' => 'item',
      '#title' => 'Lock the content persistently',
			'#description' => "If a content is locked persistenely, only you can edit it. Other users can read it only. You can release locked content by clicking on the 'Release' button. Or, go to 'My Account/Persistently locked docuemnts' to release it.",
  );
	if ($lock_status){
    $locker_uid = $lock_status->uid;
		$locker_name = $lock_status->user_name;
		$lock_time = format_date($lock_status->timestamp);
		if (user_access('release persistent lock') or $user->uid == $locker_uid){

      if ($user->uid == $locker_uid){
        $msg = "The content is now locked persistently by you since $lock_time. If the lock is no more necessary, please release it.";
			}
			else{
        if (user_access('access nhpid email') ) $email_link = l(" or ask info", "nhpid_email/$locker_uid",array('attributes' => array('target' => '_blank')));
        $msg = "The content is locked persistently by $locker_name since $lock_time. You are not allowed to edit the content at this moment. Please try it again a few moments later$email_link. Or, you can release the lock.";
			}

      $form['lock_warning'] = array(
	      '#type' => 'item',
	      '#title' => '',
	      '#markup' => $msg,
	    );
      $form['release'] = array(
	      '#type' => 'submit',
			'#title' => 'Relaase persistent lock',
	      '#value' => 'Release',
	    );
		}
		else{
			if (user_access('access nhpid email') ) $email_link = l(" or ask info", "nhpid_email/$locker_uid",array('attributes' => array('target' => '_blank')));
			$msg = "The content is locked persistently by $locker_name since $lock_time. You are not allowed to edit the content at this moment. Please try it again a few moments later$email_link.";
			$form['lock_warning'] = array(
				'#type' => 'item',
				'#title' => '',
				'#markup' => $msg,
			);
		}
	}
	else if(!$lock_status){
    $form['lock'] = array(
	      '#type' => 'submit',
	      '#value' => 'Lock',
	  );
	}

  $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid,
  );
  $form['#submit'] = array('nhpid_persistent_content_lock_form_submit');
  return $form;
}

function nhpid_persistent_content_lock_form_submit($form, &$form_state){
	global $user;
	$nid = $form_state['values']['nid'];
		
  switch ($form_state['clicked_button']['#id']) {
    case "edit-release" :
		nhpid_persistent_content_lock_release($nid);
    break;

    case "edit-lock" :
		nhpid_persistent_content_lock_set($nid, $user);
    break;
    default:
  //drupal_set_message(nhpid_api_dump($path , 'brown', TRUE));
  }
  //assessment_central_download($path, $file);
}
function nhpid_persistent_content_lock_node_tab_access($node, $account = NULL) {
  //drupal_set_message(nhpid_api_dump($node, 'red', TRUE));
  //return NODE_ACCESS_DENY;
	global $user;
  if (!isset($account)) {
    $account = $user;
  }
  ## blocks edting nhpid menu struture nodes by users other than admin
  //$nhpid_menu_node_types = array("nhpid_data_entry", "list_records", "nhpid_data_form","nhpid_data_form_group", "fields_house", "article");
  //if (in_array($node -> type, $nhpid_menu_node_types)){
		//if($user -> uid == 1) {
		if(!node_access('update', $node, $account)){
    	return FALSE;
		}
		//else{
		//	return FALSE;
		//}
  //}
  
  //if(nhpid_api_is_a_nhpid_data_node_type($node->type)) {
    if (user_access('lock content persistently', $account)){
      $lock_status = nhpid_persistent_content_lock_status($node->nid);
			if ($lock_status) {
        $locker_uid = $lock_status->uid;
				if(user_access('release persistent lock',$account) or $locker_uid==$account->uid){
	        return TRUE;
				}
				else{
	        return FALSE;
				}

	    }
			else{
        return TRUE;
			}
		}
    else {
      return FALSE;
    }

  //}
  return FALSE;
}
function nhpid_persistent_content_lock_overview($account = NULL) {
  global $user;
  // TODO: old checkout code, review
  $header = array(array('data' => t('Node type'), 'field' => 'n.type'));
  $header[] = array('data' => t('Title'), 'field' => 'n.title', 'sort' => 'asc');
  // in the case of an admin, we dont have uid, as he sees all locks
  if (!$account) {
    $header[] = array('data' => t('Username'), 'field' => 'u.name');
    $uid = NULL;
  }
  // otherwise we have the account of the user just beeing views as argument
  else {
    $uid = $account->uid;
  }
  $header[] = array('data' => t('Locked since'), 'field' => 'c.timestamp');
  if($uid == $user->uid || user_access('release persistent lock')) {
    $header[] = t('Operations');
  }

  $query = db_select('nhpid_persistent_content_lock', 'c')
    ->extend('TableSort')
    ->fields('c');
  $n = $query->join('node', 'n', '%alias.nid = c.nid');
  $query->fields($n, array('title'))
        ->fields($n, array('type'));
  $u = $query->join('users', 'u', '%alias.uid = c.uid');
  $query->fields($u, array('name'));
  if ($uid)
    $query->condition('c.uid', $uid);
  $query->orderByHeader($header);

  $rows = array();
  foreach ($query->execute() as $data) {
    $url = $uid ? "user/" . $user->uid . "/release_persistent_lock/releaseown/" . $data->nid : 'admin/content/nhpid_persistent_content_lock/release/'.$data->nid;
    $row = array();
    $row[] = $data->type;
    $row[] = l($data->title, "node/$data->nid");
    if (!$uid) {
      $row[] = theme('username', array('account' => user_load($data->uid)));
    }
    $row[] = format_date($data->timestamp, 'small');
    if($uid == $user->uid || user_access('release persistent lock')) {
      $row[] = l(t('release lock'), $url, array('query' => array('token' => nhpid_persistent_content_lock_get_release_token($data->nid))));
    }
    $rows[] = $row;
  }
	$output = '<div> The summary of persistently locked contents by you. </div>';

  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'nhpid_persistent_content_lock'),
                                 'empty' => t('No locked documents.')));
  //$output .= theme('pager', array('quantity' => 9));

  return $output;
}
function nhpid_persistent_content_lock_status($nid){
  $query = db_select('nhpid_persistent_content_lock', 'c')
    ->fields('c', array('nid','uid', 'user_name', 'timestamp'))
    ->condition('c.nid', $nid, '=');
  $n = $query->leftJoin('node', 'n', '%alias.nid = c.nid');
  $query->fields($n, array('title'));

  foreach ($query->execute() as $lock) {
    return $lock;
  }
	return null;
}
function nhpid_persistent_content_lock_release($nid){

	db_delete('nhpid_persistent_content_lock')->condition('nid', $nid, '=')->execute();
}

function nhpid_persistent_content_lock_set($nid, $user){
	db_insert('nhpid_persistent_content_lock')
		->fields(array('nid','uid','user_name','timestamp'), array($nid,$user->uid,$user->name,time()))
		->execute();

}
function nhpid_persistent_content_lock_release_item($nid, $account = NULL) {
  global $user;
	
  if (empty($_GET['token']) || !drupal_valid_token($_GET['token'], "nhpid_persistent_content_lock/release/$nid")) {
    return MENU_ACCESS_DENIED;
  }
	$lock = nhpid_persistent_content_lock_status($nid);
  nhpid_persistent_content_lock_release($nid);
  if (!empty($lock) && !$account && $user->uid != $lock->uid) {
    $lock_account = user_load($lock->uid);
    drupal_set_message(t('The editing lock held by !user has been released.', array('!user' => theme('username', array('account' => $lock_account)))), 'status', FALSE);
  } else {
    drupal_set_message(t('The editing lock has been released.'),'status', FALSE);
  }
  drupal_goto($account ? "user/{$account->uid}/content_lock" : 'admin/content/nhpid_persistent_content_lock');
}

function nhpid_persistent_content_lock_release_own_item($nid, $response = TRUE, $ignore_token = FALSE) {
  global $user;

  if (!$ignore_token) {
    if (!isset($_GET['token']) || !drupal_valid_token($_GET['token'], "nhpid_persistent_content_lock/release/$nid")) {
      return MENU_ACCESS_DENIED;
    }
  }
  if($nid != NULL) {
    /*
     * Imply that this is an AJAX request if we aren't expected to
     * interface with a human.
     */
    
    nhpid_persistent_content_lock_release($nid);
   // drupal_get_messages();
    if($response) {
      drupal_goto("user/" . $user->uid . "/release_persistent_lock");
    }
    else {
      exit();
    }
  }
  else { // thats what we do, if a user was creating a node and canceled
    if($response) {
      drupal_goto();
    }
    else {
      exit();
    }
  }
}
function nhpid_persistent_content_lock_get_release_token($nid) {
  return drupal_get_token("nhpid_persistent_content_lock/release/$nid");
}
function _nhpid_persistent_content_lock_node_access_callback($node, $op){
  
  //drupal_set_message(nhpid_api_dump($op, 'blue', TRUE));
  //drupal_set_message(nhpid_api_dump($node, 'blue', TRUE));
  //$node = node_load(array(nid => $nid));
  global $user;
  
  switch($op){

    case 'edit':
    case 'revisions':
    case 'workflow':
		case 'clone':
    return node_access('update', $node);
    break;

    case 'children':
    if ($user -> uid != 1){
      return FALSE;
    }
    return TRUE;
    break;
  }

}